{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "baltha-adf"
		},
		"ln_adls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ln_adls'"
		},
		"ln_azure_sqldb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ln_azure_sqldb'"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.publicapis.org/entries"
		},
		"ln_adls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://balthaadls.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_if_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get file metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_txt_file",
								"type": "DatasetReference",
								"parameters": {
									"file_name": "emp_20230607.cs",
									"folder_name": "landing/level1"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "check if file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "get file metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('get file metadata').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set false",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_exists",
										"value": "false"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set true",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_exists",
										"value": "true"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_exists": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_txt_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_update_age')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get employee",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select * from emp ')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_sql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set age",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get employee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_age",
							"value": {
								"value": "@string(sub(int(formatDateTime(utcNow(),'yyyy')),\nint(formatDateTime(activity('get employee').output.Dob,'yyyy')))\n)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "update employee",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set age",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n    'update dbo.emp set age = ',variables('v_age'),\n    'where name = ',\n    '''',pipeline().parameters.p_name,'''select 1'\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_name": {
						"type": "string"
					}
				},
				"variables": {
					"v_age": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_update_all')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get employee",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select * from emp ')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_sql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach employee",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get employee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get employee').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "update employee",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set age",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat(\n    'update dbo.emp set age = ',variables('v_age'),\n    'where name = ',\n    '''',item().name,'''select 1'\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sqldb_sql",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Set age",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "reset age",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_age",
										"value": {
											"value": "@string(sub(int(formatDateTime(utcNow(),'yyyy')),\nint(formatDateTime(item().Dob,'yyyy')))\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "reset age",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_age",
										"value": {
											"value": "@concat('')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_age": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_update_all_sp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get employee",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select * from emp ')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_sql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach employee",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get employee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get employee').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set age",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "reset age",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_age",
										"value": {
											"value": "@string(sub(int(formatDateTime(utcNow(),'yyyy')),\nint(formatDateTime(item().Dob,'yyyy')))\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "reset age",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_age",
										"value": {
											"value": "@concat('')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "update emp",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set age",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[sp_update_emp_age]",
											"storedProcedureParameters": {
												"age": {
													"type": "Int32",
													"value": {
														"value": "@variables('v_age')",
														"type": "Expression"
													}
												},
												"emp_name": {
													"type": "String",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sqldb_sql",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "set rows count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "update emp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_row_processed",
										"value": {
											"value": "@activity('update emp').output.firstRow.rows_processed",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_age": {
						"type": "String"
					},
					"v_row_processed": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_validate_file_exists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get file metadata config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select \n        max(case when property_name = ''container_name'' then property_value end) container_name,\n        max(case when property_name = ''folder_name'' then property_value end) folder_name,\n        max(case when property_name = ''file_name'' then property_value end) file_name\nfrom [dbo].[etl_metadata_config] where etl_job_name = ', \n'''',pipeline().parameters.p_etl_job_name,'''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_sql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "get all files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "get file metadata config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_txt_file",
								"type": "DatasetReference",
								"parameters": {
									"file_name": {
										"value": "@activity('get file metadata config').output.firstRow.file_name",
										"type": "Expression"
									},
									"folder_name": {
										"value": "@activity('get file metadata config').output.firstRow.folder_name",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "remove file extensions",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get all files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get all files').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "original file list",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_tempfiles",
										"value": {
											"value": "@variables('v_files')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "add files to list",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "original file list",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_files",
										"value": {
											"value": "@concat(variables('v_tempfiles'),\nsubstring(item().name,0 ,indexOf(item().name,'.')),'|'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "get unique file names",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "remove file extensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct value as filename\nfrom string_split( ''',variables('v_files'),''',''|'')\nwhere trim(value) <> ''''\n    \n    ')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_sql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "validate all files present",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get unique file names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get unique file names').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "validate data file",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_txt_file",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@concat(item().filename,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@activity('get file metadata config').output.firstRow.folder_name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "validate ctl file",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_txt_file",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@concat(item().filename,'.ctl')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@activity('get file metadata config').output.firstRow.folder_name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "validate data fin file",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_txt_file",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@concat(item().filename,'.csv.fin')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@activity('get file metadata config').output.firstRow.folder_name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "validate ctl fin file",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_txt_file",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@concat(item().filename,'.ctl.fin')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@activity('get file metadata config').output.firstRow.folder_name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "if all files exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "validate data file",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "validate ctl file",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "validate data fin file",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "validate ctl fin file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(\r\n and(\r\n    and(\r\n        equals(activity('validate data file').output.exists,true),\r\n        equals(activity('validate data fin file').output.exists,true)\r\n        ),equals(activity('validate ctl file').output.exists,true)\r\n    ),equals(activity('validate ctl fin file').output.exists,true))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "all files do not exists",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "v_all_files_exists",
													"value": "false"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "all_files_exists",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "v_all_files_exists",
													"value": "true"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_etl_job_name": {
						"type": "string",
						"defaultValue": "load_emp_file"
					}
				},
				"variables": {
					"v_files": {
						"type": "String"
					},
					"v_tempfiles": {
						"type": "String"
					},
					"v_all_files_exists": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_txt_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_validate_file_exists_with_failure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get file metadata config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select \n        max(case when property_name = ''container_name'' then property_value end) container_name,\n        max(case when property_name = ''folder_name'' then property_value end) folder_name,\n        max(case when property_name = ''file_name'' then property_value end) file_name\nfrom [dbo].[etl_metadata_config] where etl_job_name = ', \n'''',pipeline().parameters.p_etl_job_name,'''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_sql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "get all files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "get file metadata config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_txt_file",
								"type": "DatasetReference",
								"parameters": {
									"file_name": {
										"value": "@activity('get file metadata config').output.firstRow.file_name",
										"type": "Expression"
									},
									"folder_name": {
										"value": "@activity('get file metadata config').output.firstRow.folder_name",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "remove file extensions",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get all files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get all files').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "original file list",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_tempfiles",
										"value": {
											"value": "@variables('v_files')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "add files to list",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "original file list",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_files",
										"value": {
											"value": "@concat(variables('v_tempfiles'),\nsubstring(item().name,0 ,indexOf(item().name,'.')),'|'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "get unique file names",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "remove file extensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct value as filename\nfrom string_split( ''',variables('v_files'),''',''|'')\nwhere trim(value) <> ''''\n    \n    ')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_sql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "validate all files present",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get unique file names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get unique file names').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "validate data file",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_txt_file",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@concat(item().filename,'.csv')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@activity('get file metadata config').output.firstRow.folder_name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "validate ctl file",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_txt_file",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@concat(item().filename,'.ctl')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@activity('get file metadata config').output.firstRow.folder_name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "validate data fin file",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_txt_file",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@concat(item().filename,'.csv.fin')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@activity('get file metadata config').output.firstRow.folder_name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "validate ctl fin file",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_txt_file",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@concat(item().filename,'.ctl.fin')",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@activity('get file metadata config').output.firstRow.folder_name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "if all files exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "validate data file",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "validate ctl file",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "validate data fin file",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "validate ctl fin file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(\r\n and(\r\n    and(\r\n        equals(activity('validate data file').output.exists,true),\r\n        equals(activity('validate data fin file').output.exists,true)\r\n        ),equals(activity('validate ctl file').output.exists,true)\r\n    ),equals(activity('validate ctl fin file').output.exists,true))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "all files do not exists",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "v_all_files_exists",
													"value": "false"
												}
											},
											{
												"name": "fail_job",
												"type": "Fail",
												"dependsOn": [
													{
														"activity": "all files do not exists",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"message": {
														"value": "@concat('all 4 files are not available fro the feed --> ',\nitem().filename)",
														"type": "Expression"
													},
													"errorCode": "5001"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "all_files_exists",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "v_all_files_exists",
													"value": "true"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "do nothing",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "validate all files present",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_etl_job_name": {
						"type": "string",
						"defaultValue": "load_emp_file"
					}
				},
				"variables": {
					"v_files": {
						"type": "String"
					},
					"v_tempfiles": {
						"type": "String"
					},
					"v_all_files_exists": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_txt_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_wait')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "get metadata confiq",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@activity('get metadata confiq').output.firstRow.wait_time",
								"type": "Expression"
							}
						}
					},
					{
						"name": "get metadata confiq",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select \n        max(case when property_name = 'container_name' then property_value end) container_name,\n        max(case when property_name = 'folder_name' then property_value end) folder_name,\n        max(case when property_name = 'file_name' then property_value end) file_name,\n\t\t max(case when property_name = 'wait_time' then property_value end) wait_time\n\nfrom [dbo].[etl_metadata_config] where etl_job_name = 'load_emp_file'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ln_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "test.json",
						"folderPath": "output",
						"fileSystem": "lab-adf"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ln_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sqldb_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ln_azure_sqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ln_azure_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_text_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ln_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "lab-adf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ln_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_txt_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ln_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string"
					},
					"folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder_name",
							"type": "Expression"
						},
						"fileSystem": "lab-adf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "Dob",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ln_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ln_adls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ln_adls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ln_adls_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ln_azure_sqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ln_azure_sqldb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/self-hosted1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}